void Gragh::NewGragh(int NodeNum, int EdgeNum) {
	int Edgecnt = 0;
	p[1] = point(ROW / 2, COL / 2);
	for (int i = 2; i <= NodeNum; ++i) {
		int x = (1ll * rand() * rand()) % mod, y = (1ll * rand() * rand()) % mod;
		p[i] = point(x, y);
		if (i == 1) continue;
		bool flag = 0;
		for (int j = 1; j < i; ++j) {
			Line o = Line(p[i], p[j]);
			//生成新边
			//判断是否和原有边产生不合理交叉点
			if (check(o, Edgecnt)) {
				flag = 1;
				l[++Edgecnt] = o;
				add(i, j);
				mp[{i, j}] = 1;
				mp[{j, i}] = 1;
				break;
			}
		}
		if (flag == 0) {
			printf("重新生成第%d个点\n", i);
			i--;
		}
	}
	//建立联通图
	while (Edgecnt < EdgeNum) {
		printf("%d\n", Edgecnt);
		int x = rand() % NodeNum + 1, y = rand() % NodeNum + 1;//printf("%d %d %d\n", x,y,Edgecnt);
		if (mp[{x, y}] || mp[{y, x}])continue;
		mp[{x, y}] = mp[{y, x}] = 1;
		Line o = Line(p[x], p[y]);
		if (check(o, Edgecnt)) {
			l[++Edgecnt] = o;
			add(x, y);
			mp[{x, y}] = 1;
			mp[{y, x}] = 1;
		}
	}
}

void Gragh::NewGragh_2(int NodeNum, int EdgeNum) {//思路：先生成100个点，再慢慢连边
	int Edgecnt = 0;//开始边数为0
	p[1] = point(ROW / 2, COL / 2); //左上角为(0,0)
	for (int i = 2; i <= NodeNum; ++i) { //这里先只生成NodeNum个点
		int x = (1ll * rand() * rand()) % mod, y = (1ll * rand() * rand()) % mod, j;
		p[i] = point(x, y);
		bool overlap = 0;//判断是否跟之前的点重复的标志
		for (j = 1; j < i; j++) {//判断是否跟之前的点重复(置flag==0)目前i是点的个数
			if (p[j].x == p[i].x && p[j].y == p[i].y) {//j与i重复
				overlap = 1;//标志位置
				break;
			}
		}
		if (overlap == 1) {//有重复点
			printf("重新生成第%d个点\n", i);
			i--;
		}
	}
	//至此所有点已经生成，所有边还未生成
	//可以生成2个随机序列，长度为可选取的中心点的个数，一个为点的编号(1-NodeNum)，一个为发散边的数量
	//之后在每个随机的中心点向外发散
	int temp = 1;//中心点个数
	int* random1 = new int[temp];//点的编号
	int* random2 = new int[temp];//发散边的数量
	for (int i = 0; i < temp; i++) {
		random1[i] = rand() % NodeNum;
		random2[i] = rand() % 10;//10是自己定的，需要改
	}
	//现在开始发散
	for (int i = 0; i < temp; i++) {//遍历每一个随机的中心点
		int pos = random1[i];//中心点编号
		for (int j = 0; j < random2[i]; j++) {//从p[pos]发散出random2[i]条边
			int temp_pos = rand() % NodeNum;//要改（需求是随机一个点编号）
			if (mp[{pos, temp_pos}] || mp[{temp_pos, pos}])//已经有边了
				continue;
			Line o = Line(p[pos], p[temp_pos]);
			if (check(o, Edgecnt)) {
				l[++Edgecnt] = o;
				add(pos, temp_pos);
				mp[{pos, temp_pos}] = 1;
				mp[{temp_pos, pos}] = 1;
			}
		}
		if (Edgecnt >= (int)(0.8 * EdgeNum))
			break;
	}
	//又有想法：若要模拟真正的城市连边，上述做法不够
	//因为仅仅有中心城市(eg:北上广)向外发散的边,但小城市之间应该也有部分边，只是数量较少
	//需要增加:中心点可以发散出总边数的80-90%，然后其余边就随机取两个顶点连边(这两个点最好都不是中心点)
	while (Edgecnt < EdgeNum) { //这里接下来就是随机取点连边
		int x = rand() % NodeNum + 1, y = rand() % NodeNum + 1;//产生的是点的序号
		if (mp[{x, y}] || mp[{y, x}])//已经有边了
			continue;
		Line o = Line(p[x], p[y]);
		if (check(o, Edgecnt)) {
			l[++Edgecnt] = o;
			add(x, y);
			mp[{x, y}] = 1;
			mp[{y, x}] = 1;
		}
	}
}





原来lessn函数里面的
----------------------------------------------------------
//显示子图
	//for (int i = 1; i <= NodeNum; i++) {
	   // for (int j = i + 1; j <= NodeNum; j++) {
	   //	 if (mp[{i, j}] || mp[{j, i}]) {//如果有边才会考虑接下来的操作
	   //		 int behalf_i = behalf_point[num][parent[num][i]];//i所在区域的代表点的编号
	   //		 int behalf_j = behalf_point[num][parent[num][j]];//j所在区域的代表点的编号
	   //		 if (behalf_i == behalf_j&& !point_much[num][parent[num][i]]) {//两个点在同一个区域内并且这个区域内点不多(边才需要显示)
	   //			 //直接显示point[i]和point[j]这条边
	   //		 }
	   //		 if (behalf_i != behalf_j) {//在不同区域,再判断有没有哪个区域点多
	   //			 if (point_much[num][parent[num][i]] && point_much[num][parent[num][j]]) { //两个区域点都多(都用代表点连接)
	   //				 //显示point[behalf_i]和point[behalf_j]
	   //			 }
	   //			 else if (point_much[num][parent[num][i]] && !point_much[num][parent[num][j]]) {
	   //				 //显示point[behalf_i]和point[j]
	   //			 }
	   //			 else if (!point_much[num][parent[num][i]] && point_much[num][parent[num][j]]) {
	   //				 //显示point[i]和point[behalf_j]
	   //			 }
	   //			 else {//两个区域点都少(直接连接)
	   //				 //显示point[i]和point[j]
	   //			 }
	   //		 }
	   //	 }
	   // }
	//}

	//照着这个图打印，就行，要考虑是否要代表点的问题！！！

	//for (int i = 1; i <= 16; i++) {//行
	   // for (int j = 1; j <= 16; j++) {//列
	   //	 int temp = (i - 1) * 16 + j;//当前区域的编号（1-256）
	   //	 point lu_temp = point(lu.x + (i - 1) * len_row, lu.y + (j - 1) * len_row);
	   //	 point rd_temp = point(rd.x - (win_row - i) * len_row, rd.y - (win_col - j) * len_col);//找出当前这个区域内的左上点与右下点
	   //	 //接下来统计在这个区域内点的数量是否达到了(比如说)总点数(NodeNum)的2%
	   //	 for (int k = 1; k <= NodeNum; k++) { //遍历每一个顶点(编号从1开始)
	   //		 bool flag = 0;//用来至少填充一下behalf_point数组
	   //		 if (point_in_block(p[k], lu_temp, rd_temp)) {
	   //			 parent[k] = temp;//编号为k的点在区域编号为temp的区域内
	   //			win_cnt[temp]++;
	   //			//还需要更新代表点
	   //			if (dist(lu_temp, p[k]) < dist(lu_temp, p[behalf_point[temp]])) //behalf可能一开始没有
	   //				behalf_point[temp] = k;//temp区域的代表点的编号为k					
	   //		 }
	   //	 }
	   //	 if (win_cnt[temp] >= 0.02 * NodeNum) {//点过多，需要选behalf
	   //		 point_much[temp] = true;
	   //	 }
	   // }
	//}

	//现在开始重构图
	//目标:如果区域内的点之间有连边且point_much为true，则不显示
	//如果区域内的点与区域外的点有连边且point_much为true，则用代表点替换本区域内的这些点
	//for (int i = 1; i <= NodeNum; i++) {
	   // for (int j = i + 1; j <= NodeNum; j++) {
	   //	 if (mp[{i, j}] || mp[{j, i}]) {//如果有边才会考虑接下来的操作
	   //		 int behalf_i = behalf_point[parent[i]];//i所在区域的代表点的编号
	   //		 int behalf_j = behalf_point[parent[j]];//j所在区域的代表点的编号
	   //		 if (behalf_i == behalf_j&& !point_much[parent[i]]) {//两个点在同一个区域内并且这个区域内点不多(边才需要显示)
	   //			 //显示这条边
	   //			 //TODO
	   //		 }
	   //		 if (behalf_i != behalf_j) {//在不同区域
	   //			 //判断有没有哪个区域点多
	   //			 if (point_much[parent[i]] && point_much[parent[j]]) { //两个区域点都多(都用代表点连接)
	   //				 //显示point[behalf_i]和point[behalf_j]
	   //			 }
	   //			 else if (point_much[parent[i]] && !point_much[parent[j]]) {
	   //				 //显示point[behalf_i]和point[j]
	   //			 }
	   //			 else if (!point_much[parent[i]] && point_much[parent[j]]) {
	   //				 //显示point[i]和point[behalf_j]
	   //			 }
	   //			 else {//两个区域点都少(直接连接)
	   //				 //显示point[i]和point[j]
	   //			 }
	   //		 }
	   //	 }
	   // }
	//}